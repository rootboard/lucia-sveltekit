[{"slug":"/learn/adapters/custom/","content":"\nCustom database adapters can be easily created, and Lucia provides a package to test them.\n","frontmatter":{"title":"Custom"}},{"slug":"/learn/adapters/database/","content":"\nLucia uses adapters to connect to your database. The following chart shows the basic structure of the database, though they may vary from database to database. The names of the tables and columns cannot be altered.\n\n## `user`\n\nThe `user` table stores the users. The `[any]` column represents the any number of columns you can add to store additional user data. Refer to [Store additional user data](/learn/basics/store-additional-user-data). For `id`, use a auto-generated uuid or auto-increment int8, or `string` if you generate your own user id.\n\n| name            | type               | description                                                      | reference |\n| --------------- | ------------------ | ---------------------------------------------------------------- | --------- |\n| id              | string (uuid/cuid) | Should be auto-generated UUID or similar by defaults             |           |\n| provider_id     | string             | Stores the provider id using the form: `providerName:identifier` |           |\n| hashed_password | string \\| null     | `null` if the user doesn't have a password                       |           |\n| [any]           | any                | This represents any number of columns of any name                |\n\n## `session`\n\nThe `session` table stores the user's sessions (including the access token).\n\n| name         | type          | description                                    | reference |\n| ------------ | ------------- | ---------------------------------------------- | --------- |\n| user_id      | string        |                                                | user.id   |\n| access_token | string        |                                                |           |\n| expires      | number (int8) | The expiration time (Unix) of the access token |           |\n\n## `refresh_token`\n\nThe `refresh_token` table stores the user's refresh tokens.\n\n| name          | type   | description | reference |\n| ------------- | ------ | ----------- | --------- |\n| user_id       | string |             | user.id   |\n| refresh_token | string |             |           |\n","frontmatter":{"title":"Database"}},{"slug":"/learn/adapters/mongoose/","content":"\nAn adapter for Mongoose (MongoDB).\n\n```ts\nconst adapter: (mongoose: Mongoose, url: string) => Adapter;\n```\n\n**This adapter does NOT support auto user id generation.** Please generate your own user id using Lucia's `generateUserId()` in the configurations or use Mongoose's default field value. In either cases, the returned value **MUST** be a string (not `ObjectId`).\n\n### Parameter\n\n| name     | type       | description            |\n| -------- | ---------- | ---------------------- |\n| mongoose | `Mongoose` | Mongoose client        |\n| url      | `string`   | MongoDB connection url |\n\n## Installation\n\n```bash\nnpm i @lucia-sveltekit/adapter-mongoose\npnpm add @lucia-sveltekit/adapter-mongoose\nyarn add @lucia-sveltekit/adapter-mongoose\n```\n\n## Usage\n\n```ts\nimport adapter from \"@lucia-sveltekit/adapter-prisma\";\nimport mongoose from \"mongoose\";\n\n// set model here\n\nconst auth = lucia({\n    adapter: adapter(mongoose, url),\n});\n```\n\n## Models\n\n### `user`\n\nYou may add additional fields to store custom user data. Refer to [Store additional user data](/learn/basics/store-additional-user-data).\n\n```ts\nconst User = mongoose.model(\n    \"user\",\n    new mongoose.Schema(\n        {\n            _id: {\n                type: String,\n            },\n            provider_id: {\n                type: String,\n                unique: true,\n                required: true,\n            },\n            hashed_password: String,\n        },\n        { _id: false }\n    )\n);\n```\n\n### `session`\n\n```ts\nconst Session = mongoose.model(\n    \"session\",\n    new mongoose.Schema({\n        access_token: {\n            type: String,\n            unique: true,\n            required: true,\n        },\n        user_id: {\n            type: String,\n            required: true,\n        },\n        expires: {\n            type: Number,\n            required: true,\n        },\n    })\n);\n```\n\n### `refresh_token`\n\n```ts\nconst RefreshToken = mongoose.model(\n    \"refresh_token\",\n    new mongoose.Schema({\n        refresh_token: {\n            unique: true,\n            required: true,\n            type: String,\n        },\n        user_id: {\n            required: true,\n            type: String,\n        },\n    })\n);\n```\n","frontmatter":{"title":"Mongoose (MongoDB)"}},{"slug":"/learn/adapters/prisma/","content":"\nAn adapter for Prisma ORM. Can be used with: SQL, MySQL, PostgreSQL, and SQLite.\n\n```ts\nconst adapter: (client: PrismaClient) => Adapter;\n```\n\n### Parameter\n\n| name   | type           | description   |\n| ------ | -------------- | ------------- |\n| client | `PrismaClient` | Prisma client |\n\n## Installation\n\n```bash\nnpm i @lucia-sveltekit/adapter-prisma\npnpm add @lucia-sveltekit/adapter-prisma\nyarn add @lucia-sveltekit/adapter-prisma\n```\n\n## Usage\n\n```ts\nimport prisma from \"@lucia-sveltekit/adapter-prisma\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst client = new PrismaClient();\n\nconst auth = lucia({\n    adapter: prisma(client),\n});\n```\n\n## Schema\n\n### `user`\n\nYou may add additional columns to store custom user data. Refer to [Store additional user data](/learn/basics/store-additional-user-data). `id` may be `String` if you generate your own user id.\n\n```prisma\nmodel User {\n  id              String         @id @unique @default(cuid())\n  provider_id     String         @unique\n  hashed_password String?\n  username        String         @unique\n  user_email      String         @unique\n  refresh_token   RefreshToken[]\n  session         Session[]\n\n  @@map(\"user\")\n}\n```\n\n### `session`\n\n```prisma\nmodel Session {\n  id           Int    @id @unique @default(autoincrement())\n  access_token String @unique\n  user_id      String\n  expires      BigInt\n  user         User   @relation(references: [id], fields: [user_id], onDelete: Cascade)\n\n  @@index([user_id])\n  @@map(\"session\")\n}\n```\n\n### `refresh_token`\n\n```prisma\nmodel RefreshToken {\n  id            Int    @id @unique @default(autoincrement())\n  refresh_token String @unique\n  user_id       String\n  user          User   @relation(references: [id], fields: [user_id], onDelete: Cascade)\n\n  @@index([user_id])\n  @@map(\"refresh_token\")\n}\n```\n","frontmatter":{"title":"Prisma"}},{"slug":"/learn/adapters/supabase/","content":"\nAn adapter for Supabase (v1) PostgreSQL database. **Make sure to enable row level security for all tables!**\n\n```ts\nconst adapter: (url: string, secret: string) => Adapter;\n```\n\n### Parameter\n\n| name   | type     | description                         |\n| ------ | -------- | ----------------------------------- |\n| url    | `string` | Supabase project url                |\n| secret | `string` | `service_role` secret; NOT anon key |\n\n## Installation\n\n```bash\nnpm i @lucia-sveltekit/adapter-supabase\npnpm add @lucia-sveltekit/adapter-supabase\nyarn add @lucia-sveltekit/adapter-supabase\n```\n\n## Usage\n\n```ts\nimport supabase from \"@lucia-sveltekit/adapter-supabase\";\n\nconst auth = lucia({\n    adapter: supabase(url, secret),\n});\n```\n\n## Database structure\n\n`uuid` should be changed to `varchar` if you use custom user ids.\n\n### `user`\n\nYou may add additional columns to store custom user data. Refer to [Store additional user data](/learn/basics/store-additional-user-data). `id` may be `varchar` if you generate your own user id.\n\n| name            | type      | foreign constraint | default              | nullable | unique | identity |\n| --------------- | --------- | ------------------ | -------------------- | -------- | ------ | -------- |\n| id              | `uuid`    |                    | `generate_uuid_v4()` |          | true   | true     |\n| provider_id     | `varchar` |                    |                      |          | true   |          |\n| hashed_password | `string`  |                    |                      | true     |        |          |\n\n### `session`\n\n| name         | type      | foreign constraint | nullable | unique | identity |\n| ------------ | --------- | ------------------ | -------- | ------ | -------- |\n| id           | `int8`    |                    |          | true   | true     |\n| user_id      | `uuid`    | `primary:user.id`  |          |        |          |\n| access_token | `varchar` |                    |          | true   |          |\n| expires      | `int8`    |                    |          |        |          |\n\n### `refresh_token`\n\n| name          | type      | foreign constraint | nullable | unique | identity |\n| ------------- | --------- | ------------------ | -------- | ------ | -------- |\n| id            | `int8`    |                    |          | true   | true     |\n| user_id       | `uuid`    | `primary:user.id`  |          |        |          |\n| refresh_token | `varchar` |                    |          | true   |          |\n\n## SQL Example for creation database in SupaBase SQL Editor \n`uuid` in `user` table should be changed to `varchar` if you use custom user ids.\nYou may add additional columns to store custom user data in `user` table. Refer to [Store additional user data](/learn/basics/store-additional-user-data).\n\n```sql\nCREATE TABLE public.user (\n\tid UUID DEFAULT extensions.uuid_generate_v4() PRIMARY KEY,\n\tprovider_id VARCHAR NOT NULL UNIQUE,\n\thashed_password TEXT NULL\n);\n\nCREATE TABLE public.session (\n  \tid INT8 GENERATED BY DEFAULT AS IDENTITY UNIQUE,\n\tuser_id UUID REFERENCES public.user(id),\n\taccess_token VARCHAR NOT NULL UNIQUE,\n\texpires INT8 NOT NULL\n);\n\nCREATE TABLE public.refresh_token (\n  \tid INT8 GENERATED BY DEFAULT AS IDENTITY UNIQUE,\n\tuser_id UUID REFERENCES public.user(id),\n\trefresh_token VARCHAR NOT NULL UNIQUE\n);\n\nALTER TABLE public.user ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.session ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.refresh_token ENABLE ROW LEVEL SECURITY;\n\nCOMMENT ON TABLE public.user IS '[Lucia] Users';\nCOMMENT ON TABLE public.session IS '[Lucia] User Sessions';\nCOMMENT ON TABLE public.refresh_token IS '[Lucia] Users Token';\n```\n","frontmatter":{"title":"Supabase"}},{"slug":"/learn/start-here/concepts/","content":"\n## How Lucia works under the hood\n\nOnce a user signs in, an access token and a refresh token is issued. The access token can be used to identify the user and is valid for the duration of the session (8 hours). Once the access token expires, the one-time refresh token can be used to create a new session, thus creating a new access and refresh token. Both of these tokens are stored as http-only cookies and can only be read from the server. Lucia will only considered cookies valid if the request is coming from a trusted domain.\n\n## Provider ids\n\nUsers can be identified using either of 2 attributes: user id and provider id. You can think of user id as for referencing users internally, and provider id for referencing users using external data. This means you can use the user's input or data from OAuth provider to validate and get a user.\n\nProvider id is the combination of the provider name (the authentication method used), and an identifier (something unique to that user within the authentication method). It takes the form of `${providerName}:${identifier}`. For example, for email/password, `email` can be the provider name and the user's email can be the identifier; and for Github OAuth, `github` can be the provider name and the user's Github user id can be the identifier.\n\n## Database adapters\n\nTo support multiple databases, Lucia uses database adapters. These adapters provide a set of identical methods to read from and update the database. Custom adapters can be created as well if Lucia does not provide one.","frontmatter":{"title":"Concepts"}},{"slug":"/learn/start-here/getting-started/","content":"\nInstall Lucia using your package manager of your choice.\n\n```bash\nnpm i lucia-sveltekit\npnpm add lucia-sveltekit\nyarn add lucia-sveltekit\n```\n\n## Set up the database\n\nLucia currently supports multiple databases: [Prisma](/learn/adapters/prisma) (SQL, MySQL, SQLite, PostgreSQL), [Supabase](/learn/adapters/supabase), and [Mongoose](/learn/adapters/mongoose) (MongoDB). Please follow each adapter's instruction for this step.\n\n## Initialize Lucia\n\nIn `$lib/server/lucia.ts`, import [`lucia`](/reference/api/server-api#lucia) and an adapter (the adapters are provided as a different npm package).\n\n```ts\n// lib/server/lucia.ts\nimport lucia from \"lucia-sveltekit\";\nimport prisma from \"@lucia-sveltekit/adapter-prisma\";\n```\n\nInitialize it by calling `lucia()` and export it as `auth`. `adapter` is your database adapters, and [`env`](/reference/configure/lucia-configurations#env) tells Lucia what environment the server is running on. Checking if [`dev`](https://kit.svelte.dev/docs/modules#$app-environment-dev) (imported from `$app/environment`) is true is usually sufficient.\n\n```ts\n// lib/server/lucia.ts\nimport lucia from \"lucia-sveltekit\";\nimport prisma from \"@lucia-sveltekit/adapter-prisma\";\nimport { dev } from \"$app/environment\";\n\nexport const auth = lucia({\n    adapter: prisma(),\n    env: dev ? \"DEV\" : \"PROD\",\n});\n```\n\nThis module and the file that holds it **should NOT be imported from the client**.\n\n## Configure your SvelteKit project\n\n### Hooks\n\nCreate a server hooks file (`src/hooks.server.ts`) and import the `auth` module. Create and export a handle function with [`handleHooks()`](/reference/api/server-api#handlehooks) method. This will expose some endpoints (like for refreshing sessions) and will provide the client with the current user. \n\n```ts\n// hooks.server.ts\nimport { auth } from \"$lib/server/lucia\";\n\nexport const handle = auth.handleHooks();\n```\n\nIf you have your own handle function, SvelteKit's [`sequence`](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence) can be used to chain multiple handle functions. Make sure Lucia's handle function is the first one.\n\n```ts\n// hooks.server.ts\nimport { auth } from \"$lib/server/lucia\";\nimport { sequence } from \"@sveltejs/kit/hooks\";\n\nexport const handle = sequence(auth.handleHooks(), customHandle);\n```\n\n### Root layout\n\nIn your route root layout, create and export a server load function. [`handleServerSession()`](/reference/api/server-api#handleserversession) method will read the token and validate them, allowing you to check for the user in load functions. This will also automatically refresh the access token if its expired.\n\n```ts\n// +layout.server.ts\nimport { auth } from \"$lib/server/lucia\";\nimport type { ServerLoad } from \"@sveltejs/kit\";\n\nexport const load: ServerLoad = auth.handleServerSession();\n```\n","frontmatter":{"title":"Getting started"}},{"slug":"/learn/start-here/introduction/","content":"\nLucia is an authentication library that, at its core, makes managing users and sessions easier. It doesn't attempt to do anything more than that. It's not a out-of-the-box library like NextAuth, nor an auth provider like Firebase, and that is a super important distinction. You will need to bring your own database and things like OAuth and magic links have to be made by yourself. However, once you understand the basics of Lucia and authentication, it allows you to fully control and customize your authentication.\n\nWorking with Lucia looks something like this. In the code below, you're creating a new user with a user/password method, creating a new session, and saving the tokens inside cookies.\n\n```ts\nconst user = await auth.createUser(\"email\", email, {\n    password,\n});\nconst { tokens } = await auth.createSession(user.userId);\nsetCookie(cookie, ...tokens.cookies);\n```\n","frontmatter":{"title":"Introduction"}},{"slug":"/learn/basics/authenticate-users/","content":"\nUsers with passwords can be authenticated using [`authenticateUser()`](/reference/api/server-api#authenticateuser). This method will only work if the user has a password (the password is not `null`). The provider name and an identifier declared during creation is necessary, both of which are explained in [Create users](/learn/basics/create-users). An error will be thrown if the password is incorrect.\n\nWhile Lucia will tell you (via an error) if the provider id or the password was incorrect, **never expose such data to the client**. Make the error message vague as possible (eg. \"Invalid credentials\").\n\nThis method will not create a new session (tokens). To create a new session after authenticating a user, refer to [Create sessions](/learn/basics/create-sessions).\n\n```ts\nimport { auth } from \"$lib/server/lucia.ts\";\n\nawait auth.authenticateUser(providerName, identifier, password);\n```\n\n## Example\n\nThe following example uses `email` as the provider name and the provided email as the identifier.\n\n```ts\nimport { auth } from \"$lib/server/lucia.ts\";\n\nconst authenticateUser = async (email: string, password: string) => {\n    try {\n        await auth.authenticateUser(\"email\", email, password);\n    } catch {\n        // error (invalid provider id or password, etc)\n    }\n};\n```\n","frontmatter":{"title":"Authenticate users"}},{"slug":"/learn/basics/create-sessions/","content":"\nUpon session creation, a new access token (as well as a refresh token) that is connected to the session will be issued. These tokens should be stored in a http-only cookie.\n\nA new session can be created using [`createSession()`](/reference/api/server-api#createsession) method, which takes a user id.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nconst { session, tokens } = await auth.createSession(\"userId\");\n```\n\n## Create a new session\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    const { session, tokens } = await auth.createSession(\"123456\");\n} catch {\n    // invalid user id\n}\n```\n\n## Store the tokens as cookies\n\nThe tokens has to be manually stored as cookies, and the cookie strings (array) can be accessed from `tokens.cookies`.\n\n```ts\nconst { session, tokens } = await auth.createSession(\"123456\");\nconst cookieStrings = tokens.cookies; // [accessTokenCookie, refreshTokenCookie]\n```\n\nLucia provides a helper function called [`setCookie`](/reference/api/server-api#setcookie) which allows you to set cookies using SvelteKit's cookie.\n\n```ts\nimport { setCookie } from \"lucia-sveltekit\";\n\nawait setCookie(cookie, ...cookieStrings);\n```\n\n## Update the current user on the client\n\n`createSession` creates a new session _on the server_, but the client cannot listen for server side events (including new cookies). So, the client will not automatically update the current user when a session, a user, or a cookie was modified. Both the hooks and the root layout server function must run as well for it update as well. To update the session in the client (ie. for [`getUser()`](/reference/api/client-api#getuser) to work), you must refresh the entire page. This means you have to cause a server side navigation (using `window.location.href` for example) rather than [`goto()`](https://kit.svelte.dev/docs/modules#$app-navigation-goto) or [`invalidateAll()`](https://kit.svelte.dev/docs/modules#$app-navigation-invalidateall). In short, refresh the page when you modify the session, the user, or cookies.\n\nHowever, when using forms with SvelteKit's [`use:enhance`](https://kit.svelte.dev/docs/modules#$app-forms-enhance) form actions, the default behavior is to redirect using `goto()`. You must override this behavior if you're using forms for sign ins and account creation. Refer to [Using forms](/learn/basics/using-forms).\n\n## Example\n\nMake sure to spread `tokens.cookies` when calling `setCookie()`. Since a new session was created, and a new cookie was set, refresh the page.\n\n```ts\n// +page.server.ts\nimport { auth } from \"$lib/server/lucia\";\nimport { setCookie } from \"lucia-sveltekit\";\nimport { redirect, type Actions } from \"@sveltejs/kit\";\n\nexport const actions: Actions = {\n    default: async ({ cookie }) => {\n        // ...\n        try {\n            const { tokens } = await auth.createSession(userId);\n            setCookie(cookie, ...tokens.cookies);\n        } catch {\n            // error\n        }\n        throw redirect(302, \"/\"); // refresh the page by redirecting the user\n    },\n};\n```\n","frontmatter":{"title":"Create Sessions"}},{"slug":"/learn/basics/create-users/","content":"\nThe [`createUser()`](/reference/api/server-api#createuser) method can be used to create users, which requires a provider name and identifier. Lucia (or rather the database) will automatically generate a user id for your users on creation. However, you can generate your own user id using [`configurations.generateCustomUserId`](/reference/configure/lucia-configurations#generatecustomuserid).\n\nThis method will not create a new session (tokens). To create a new session after creating a user, refer to [Create sessions](/learn/basics/authenticate-users).\n\n```ts\nimport { auth } from \"$lib/server/lucia.ts\";\n\nawait auth.createUser(providerName, identifier, options);\n```\n\n## Create a user\n\n### Without a password\n\nThis is useful when you can trust the input for the provider name and identifier. When implementing OAuth for example, you can trust that the provider has validated the user and has given you the correct identifier (you will never get the information about user B when user A signs in with the OAuth provider).\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.createUser(\"github\", \"user@example.com\");\n} catch {\n    // invalid input\n}\n```\n\n### With a password\n\nThis is useful for the simple email/username and password approach. The password will be automatically hashed when storing the user's data.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.createUser(\"email\", \"user@example.com\", {\n        password: \"123456\",\n    });\n} catch {\n    // invalid input\n}\n```\n\n## Store additional user data\n\nBy default, Lucia will store the user id, provider id, and the hashed password (if a password is provided). The components of the provider id - the provider name and identifier - are not stored in its own column, and is combined so as to be stored in a single column. Storing additional data of the users is not automatically supported and some minimal work is needed to configure your database. Lucia will throw an error if the provided user data violates a unique constraint of a column. Refer to [Store additional user data](/learn/basics/store-additional-user-data) for more information.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.createUser(\"github\", \"user@example.com\", {\n        userData: {\n            username: \"user\",\n            phone_number: \"000-0000-0000\",\n        },\n    });\n} catch {\n    // invalid input\n}\n```\n\n## Example\n\nThe following example uses `email` as the provider name and the provided email as the identifier.\n\n```ts\n// inside a server\nimport { auth } from \"$lib/server/lucia\";\n\nconst createUser = async (email: string, password: string) => {\n    try {\n        const user = await auth.createUser(\"email\", email, {\n            password,\n        });\n    } catch {\n        // error (user already exists, etc)\n    }\n};\n```\n","frontmatter":{"title":"Create users"}},{"slug":"/learn/basics/get-current-user-in-load-functions/","content":"\nThis page is for normal load functions, and not _server_ load functions. For server load functions, refer to [Validate server requests](/learn/basics/validate-server-requests).\n\nTo get the current user, import [`getUser`](/reference/api/load-api) from `lucia-sveltekit/load`. `lucia-sveltekit/client` also exports a similar function but this cannot be used in the load function. This function takes in the load function event, and returns a readonly [`User`](/reference/types/lucia-types#user), or `null` if the user does not exist.\n\nThis function will await for parent load functions to finish when running in the server, and run immediately when running in the browser. This reduces unnecessary waterfalls when loading pages.\n\n```ts\nimport { getUser } from \"lucia-sveltekit/load\";\n\nconst user = await getUser(event);\n```\n\n## Example\n\n```ts\n// +page.ts\nimport { getUser } from \"lucia-sveltekit/load\";\nimport type { Load } from \"@sveltejs/kit\";\n\nexport const load: Load = async (event) => {\n    const user = await getUser(event);\n    if (!user) {\n        // not authenticated\n    }\n};\n```\n","frontmatter":{"title":"Get current user in load functions"}},{"slug":"/learn/basics/get-current-user-in-the-client/","content":"\nTo get the current user, import [`getUser`](/reference/api/client-api) from `lucia-sveltekit/client`. `lucia-sveltekit/load` also exports a similar function but this cannot be used inside pages.\n\nThis function will return a readonly [`User`](/reference/types/lucia-types#user), or `null` if the user doesn't exist. Unlike <0.10.0, this function returns a plain object rather than a writable store.\n\n```ts\nimport { getUser } from \"lucia-sveltekit/client\";\n\nconst user = getUser();\n```\n\n### Example\n\n```svelte\n<script lang=\"ts\">\n    import { getUser } from \"lucia-sveltekit/client\";\n\n    const user = getUser();\n    const userId = user?.userId;\n</script>\n```\n","frontmatter":{"title":"Get current user in the client"}},{"slug":"/learn/basics/manage-sessions/","content":"\nUpdating the current session will not be automatically reflected in the client. Make sure to refresh the page after it.\n\n## Refresh sessions\n\nSessions can be refreshed using the [`refreshSession()`](/reference/api/server-api#refreshsession) method. This takes in a refresh token and creates a new access and refresh token. The old refresh token will be invalidated. Returns a new session and tokens.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    const { session, tokens } = await auth.refreshSession(refreshToken);\n} catch {\n    // invalid refresh token\n}\n```\n\n## Invalidate session\n\n### Specific session\n\nTo invalidate a session connected to an access token, use the [`invalidateSession()`](/reference/api/server-api#invalidatesession) method. This does not delete the refresh token created with the target access token. Will succeed regardless of the validity of the token.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nawait auth.invalidateSession(accessToken);\n```\n\n### All sessions of a user\n\nTo invalidate all the sessions of a user, use the [`invalidateAllUserSessions()`](/reference/api/server-api#invalidateallusersessions) method. This does not invalidate any refresh tokens of the target user. Will succeed regardless of the validity of the user id.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nawait auth.invalidateAllUserSessions(userId);\n```\n","frontmatter":{"title":"Manage sessions"}},{"slug":"/learn/basics/manage-users/","content":"\nUpdating the current user will not be automatically reflected in the client. Make sure to refresh the page after it.\n\n## Update user\n\nLucia provides few methods to update the user, one for each user attribute. Lucia currently does not provide a way to update the user id. All of the methods return the updated user.\n\n### Provider id\n\nThe provider id can be updated using the [`updateUserProviderId()`](/reference/api/server-api#updateuserproviderid) method. Both the provider name and identifier must be provided.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    const user = await auth.updateUserProviderId(userId, provider, identifier);\n} catch {\n    // invalid input\n}\n```\n\n### Password\n\nThe password can be updated using the [`updateUserPassword()`](/reference/api/server-api#updateuserpassword) method. Lucia will handle the hashing.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nconst user = await auth.updateUserPassword(userId, password);\n```\n\n### User data\n\nAdditional user data stored in the database can be updated using the [`updateUserData()`](/reference/api/server-api#updateuserdata) method. Only the user data attribute (column) that needs to updated has to be password. `undefined` values will be ignored, while `null` will not.\n\nRefer to [Store additional user data](/learn/basics/store-additional-user-data) for more information on storing additional user data.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nconst user = await auth.updateUserData(userId, partialUserData);\n```\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    const user = await auth.updateUserData(userId, {\n        phoneNumber: \"000-0000-0000\",\n        profilePicture: null,\n    });\n} catch {\n    // invalid input\n}\n```\n\n## Delete user\n\nUsers can be deleted using the [`deleteUser()`](/reference/api/server-api#deleteuser) method. All sessions and refresh tokens of the target user will be deleted as well. This method will succeed regardless of the validity of the user id.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nconst user = auth.deleteUser(userId);\n```\n","frontmatter":{"title":"Manage users"}},{"slug":"/learn/basics/refresh-session-in-the-client/","content":"\nYou can revoke the current session using [`refreshSession()`](/reference/api/client-api#refreshsession), exported by `lucia-sveltekit/client`.\n\n```ts\nimport { refreshSession } from \"lucia-sveltekit/client\";\n\nawait refreshSession();\n```","frontmatter":{"title":"Refresh session in the client"}},{"slug":"/learn/basics/sign-out-users-in-the-client/","content":"\nYou can revoke the current session using [`signOut()`](/reference/api/client-api#signout), exported by `lucia-sveltekit/client`. This takes an optional parameter of a url where the user will be redirected to after sign out.\n\n```ts\nimport { signOut } from \"lucia-sveltekit/client\";\n\nawait signOut(redirectUrl);\n```\n\n## Example\n\nThe user will be redirected to /login on successful sign out.\n\n```ts\nimport { signOut } from \"lucia-sveltekit/client\";\n\nawait signOut(\"/login\");\n```","frontmatter":{"title":"Sign out users in the client"}},{"slug":"/learn/basics/store-additional-user-data/","content":"\nAny number of additional columns can be added to the `user` table, and it will be included to the `User` object alongside with the user id (`.userId`). This should be generally used for commonly used data (like username and profile pictures) and for user permissions (like if the user is an admin). Larger and specific data should be stored inside a different table.\n\nThe column can be unique as well, and Lucia will throw an error when a provided user data violates the unique rule upon user creation or update.\n\n## Types\n\nTo type `User`, add the column names and the value type inside `Lucia.UserData` in `src/app.d.ts`:\n\n```ts\n/// <reference types=\"lucia-sveltekit\" />\ndeclare namespace Lucia {\n    interface UserData {}\n}\n```\n\nRefer to [Type declaration](/reference/types/type-declaration).\n\n## Example\n\nTo store user's phone number, for example, a `phone_number` column should be added to the `user` table:\n\n| column          | type   |\n| --------------- | ------ |\n| id              | string |\n| hashed_password | string |\n| provider_id     | string |\n| phone_number    | string |\n\nThe phone number column can be accessed with `user.phone_number`:\n\n```ts\nimport { auth } from \"$lib/server/lucia.ts\";\n\nconst user = await auth.getUser();\nconst phoneNumber = user.phone_number;\n```\n\nThis can be typed by:\n\n```ts\n/// <reference types=\"lucia-sveltekit\" />\ndeclare namespace Lucia {\n    interface UserData {\n        phone_number: string;\n    }\n}\n```\n","frontmatter":{"title":"Store additional user data"}},{"slug":"/learn/basics/using-forms/","content":"\nWhen using forms for sign in and account creation, the page has to be refreshed for the session to update (the hooks has to re-run) However, when using [`use:enhance`](https://kit.svelte.dev/docs/modules#$app-forms-enhance) action, the default behavior is that the user will be redirected using [`goto()`](https://kit.svelte.dev/docs/modules#$app-navigation-goto), which does not re-run hooks. To use SvelteKit's form actions, you must override the default behavior and redirect users using `window.location.href`.\n\n```svelte\n<script lang=\"ts\">\n\timport { applyAction, enhance } from '$app/forms';\n</script>\n\n<form\n\tuse:enhance={() => {\n\t\treturn async ({ result }) => {\n\t\t\tif (result.type === 'redirect') {\n\t\t\t\twindow.location.href = result.location;\n\t\t\t\treturn\n\t\t\t}\n\t\t\tapplyAction(result);\n\t\t};\n\t}}\n/>\n```\n","frontmatter":{"title":"Using forms"}},{"slug":"/learn/basics/validate-server-requests/","content":"\nThis page is for: Actions, standalone endpoints, and server load functions (ie. for +page.server.ts and +server.ts files). To get the current user in a normal load function refer to [Get current user in load functions](/learn/basics/get-current-user-in-load-functions). To get the current user in the client, refer to [Get current user in the client](/learn/basics/get-current-user-in-the-client).\n\n## Validate requests\n\nThe easiest way to validate requests is to use the [`validateRequest()`](/reference/api/server-api#validaterequest) method. This returns the current session (not the user) from the access token.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nawait auth.validateRequest(request);\n```\n\n## Validate requests using access tokens\n\nAlternatively, you can get the access token from the request and validate the token. Using this method allows you to directly get the user from the token.\n\n### Get access token from request\n\n[`parseRequest()`](/reference/api/server-api#parserequest) method will return both the access token and refresh token from the provided request. Note that this method does not check the validity of the tokens. The tokens' value will be an empty string if the cookie does not exist. This method will also check if the request is coming from a trusted domain (the domain as where the app is)\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    const { accessToken, refreshToken } = await auth.parseRequest(request);\n} catch {\n    // invalid request\n}\n```\n\n### Get current session\n\nUse [`validateAccessToken()`](/reference/api/server-api#validateaccesstoken) to get the session from the access token.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    const session = await auth.validateAccessToken(accessToken);\n} catch {\n    // invalid access token\n}\n```\n\n### Get current user\n\nUse [`getSessionUser()`](/reference/api/server-api#getsessionuser) to get the user of the session from the access token.\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    const user = await auth.getSessionUser(accessToken);\n} catch {\n    // invalid access token\n}\n```\n\n## Example\n\nThe following example uses server load functions. However, the same code can be used for actions and standalone endpoints (+server.ts).\n\n### Validate requests\n\n```ts\n// +page.server.ts\nimport { auth } from \"$lib/server/lucia\";\nimport type { ServerLoad } from \"@sveltejs/kit\";\n\nexport const load: ServerLoad = async ({ request }) => {\n    try {\n        const session = await auth.validateRequest(request);\n    } catch {\n        // invalid\n    }\n};\n```\n\n### Validate requests and get the user\n\n```ts\n// +page.server.ts\nimport { auth } from \"$lib/server/lucia\";\nimport type { ServerLoad } from \"@sveltejs/kit\";\n\nexport const load: ServerLoad = async ({ request }) => {\n    try {\n        const { accessToken } = await auth.parseRequest(request);\n        const user = await auth.getSessionUser(accessToken);\n    } catch {\n        // invalid token\n    }\n};\n```\n","frontmatter":{"title":"Validate server requests"}},{"slug":"/reference/api/client-api/","content":"\nThese can be imported from `lucia-sveltekit/client`. Can only be used inside pages (+page.svelte).\n\n```ts\nimport { getUser } from \"lucia-sveltekit/client\";\n```\n\n## getUser()\n\nGets the current user.\n\n```ts\nconst getUser: () => Readonly<User> | null;\n```\n\n#### Returns\n\n| type                                                  | description                                   |\n| ----------------------------------------------------- | --------------------------------------------- |\n| `Readonly<`[`User`](/reference/types/lucia-types#user)`> \\| null` | Returns null if a current user does not exist |\n\n#### Example\n\n```ts\nimport { getUser } from \"lucia-sveltekit/client\";\n\nconst user = getUser();\nconst userId = user?.userId;\n```\n\n## refreshSession()\n\nRefreshes the current session.\n\n```ts\nconst refreshSession: () => Promise<number>;\n```\n\n#### Returns\n\n| type     | description                                        |\n| -------- | -------------------------------------------------- |\n| `number` | The expiration time (Unix time) of the new session |\n\n#### Errors\n\n| name                       | description                            |\n| -------------------------- | -------------------------------------- |\n| AUTH_INVALID_REFRESH_TOKEN | Invalid refresh token                  |\n| DATABASE_UPDATE_FAILED     | Failed to update database              |\n| DATABASE_FETCH_FAILED      | Failed to fetch data from the database |\n| UNKNOWN_ERROR              |                                        |\n\n#### Example\n\n```ts\nimport { refreshSession } from \"lucia-sveltekit/client\";\n\ntry {\n    await refreshSession();\n} catch {\n    // error\n}\n```\n\n## signOut()\n\nSigns the user out the current session. Refresh the page for the current state to update.\n\n```ts\nconst signOut: (redirect?: string) => Promise<void>;\n```\n\n#### Parameter\n\n| name     | type     | description                                      | optional |\n| -------- | -------- | ------------------------------------------------ | -------- |\n| redirect | `string` | The url to redirect to after a successful logout | true     |\n\n#### Errors\n\n| name                      | description          |\n| ------------------------- | -------------------- |\n| AUTH_INVALID_ACCESS_TOKEN | Unauthorized request |\n| UNKNOWN_ERROR             |                      |\n\n#### Example\n\n```ts\nimport { signOut } from \"lucia-sveltekit/client\";\n\nawait signOut(\"/login\");\n```\n","frontmatter":{"title":"Client API"}},{"slug":"/reference/api/http-api/","content":"\nUsing [`handleHooks()`](/reference/api/server-api#handlehooks), Lucia exposes a few endpoints that can be called from the client.\n\n### Sign out the current user\n\n```bash\nPOST\n/api/auth/logout\n```\n\n#### Response\n\nstatus: 200\n\n```ts\ninterface ResponseBody {}\n```\n\n#### Error response\n\nstatus: 500\n\n```ts\ninterface ResponseBody {\n    message?: string;\n}\n```\n\n| error message             | description          |\n| ------------------------- | -------------------- |\n| AUTH_INVALID_ACCESS_TOKEN | Invalid access token |\n\n### Refresh the current session\n\n```bash\nPOST\n/api/auth/refresh-session\n```\n\n#### Response\n\nstatus: 200\n\n```ts\ninterface ResponseBody {\n    expires: number;\n}\n```\n\n| name    | type     | description                                   |\n| ------- | -------- | --------------------------------------------- |\n| expires | `number` | The expiration time (Unix) of the new session |\n\n#### Error response\n\nstatus: 500\n\n```ts\ninterface ResponseBody {\n    message?: string;\n}\n```\n\n| error message              | description                            |\n| -------------------------- | -------------------------------------- |\n| AUTH_INVALID_REFRESH_TOKEN | Invalid refresh token                  |\n| DATABASE_UPDATE_FAILED     | Failed to update database              |\n| DATABASE_FETCH_FAILED      | Failed to fetch data from the database |\n","frontmatter":{"title":"HTTP API"}},{"slug":"/reference/api/load-api/","content":"\nThese can be imported from `lucia-sveltekit/load`. Should only be for non server-only functions (+page/layout.ts).\n\n```ts\nimport { getUser } from \"lucia-sveltekit/load\";\n```\n\n## getUser\n\nGets the current user. This will await for parent load functions to finish when running in the server, and run immediately when running in the browser. For server load function, use [`validateRequest()`](/reference/api/server-api#validaterequest) and other server APIs.\n\n```ts\nconst getUser: (event: LoadEvent) => Promise<Readonly<User> | null>;\n```\n\n#### Parameter\n\n| name  | type        | description                                              |\n| ----- | ----------- | -------------------------------------------------------- |\n| event | `LoadEvent` | SvelteKit's load event, the parameter for load functions |\n\n#### Returns\n\n| type                     | description                                     |\n| ------------------------ | ----------------------------------------------- |\n| `Readonly<`[`User`](/reference/types/lucia-types)`> \\| null` | Returns `null` if a current user does not exist |\n\n#### Example\n\n```ts\nimport { getUser } from \"lucia-sveltekit/load\";\nimport type { Load } from \"@sveltejs/kit\";\n\nexport const load: Load = async (event) => {\n    const user = await getUser(event);\n    if (!user) {\n        // not authenticated\n    }\n};\n```\n","frontmatter":{"title":"Load API"}},{"slug":"/reference/api/server-api/","content":"\nThese can be imported from `lucia-sveltekit`. Can only be used inside a server context (.server.ts).\n\n```ts\nimport { generateRandomString } from \"lucia-sveltekit\";\n```\n\n## `generateRandomString()`\n\nGenerates a random string of a defined length. Is cryptographically random.\n\n```ts\nconst generateRandomString: (length: number) => string;\n```\n\n#### Parameter\n\n| name   | type     | description                     |\n| ------ | -------- | ------------------------------- |\n| length | `number` | The length of the output string |\n\n#### Returns\n\n| type     | description                 |\n| -------- | --------------------------- |\n| `string` | A randomly generated string |\n\n#### Example\n\n```ts\nconst randomString = generateRandomString(8);\n```\n\n## `lucia()`\n\nCreates a new `Lucia` instance.\n\n```ts\nconst lucia: (configs: Configurations) => Lucia;\n```\n\n#### Parameter\n\n| name    | type             | description                                                                                         |\n| ------- | ---------------- | --------------------------------------------------------------------------------------------------- |\n| configs | `Configurations` | Options for Lucia - refer to [Lucia configurations](/reference/configurations/lucia-configurations) |\n\n#### Example\n\n```ts\nconst auth = lucia(configs);\n```\n\n### `authenticateUser()`\n\nValidates the user's password using the provider id. Will not work with users without a password.\n\n```ts\nconst authenticateUser: (\n    provider: string,\n    identifier: string,\n    password: string\n) => Promise<User>;\n```\n\n#### Parameter\n\n| name       | type     | description   |\n| ---------- | -------- | ------------- |\n| provider   | `string` | Provider name |\n| identifier | `string` | Identifier    |\n| password   | `string` | Password      |\n\n#### Returns\n\n| type                                        | description            |\n| ------------------------------------------- | ---------------------- |\n| [`User`](/reference/types/lucia-types#user) | The authenticated user |\n\n#### Errors\n\n| name                     | description                                         |\n| ------------------------ | --------------------------------------------------- |\n| AUTH_INVALID_PROVIDER_ID | The user with the provider does not exist           |\n| AUTH_INVALID_PASSWORD    | Incorrect password                                  |\n| AUTH_OUTDATED_PASSWORD   | The user's password is hashed with an old algorithm |\n| DATABASE_FETCH_FAILED    | Failed to fetch data from the database              |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.authenticateUser(\"email\", \"user@example.com\", \"123456\");\n} catch {\n    // invalid credentials\n}\n```\n\n### `createSession()`\n\nCreates a new session of a user.\n\n```ts\nconst createSession: (userId: string) => Promise<{\n    session: Session;\n    tokens: Tokens;\n}>;\n```\n\n#### Parameter\n\n| name   | type     | description                          |\n| ------ | -------- | ------------------------------------ |\n| userId | `string` | The user id of the session to create |\n\n#### Returns\n\n| name    | type                                            | description                           |\n| ------- | ----------------------------------------------- | ------------------------------------- |\n| session | [`Session`](/reference/types/lucia-types#session)                                       | The newly created session             |\n| tokens  | [`Tokens`](/reference/types/lucia-types#tokens) | The tokens and cookies of the session |\n\n#### Errors\n\n| name                   | description                              |\n| ---------------------- | ---------------------------------------- |\n| AUTH_INVALID_USER_ID   | The user with the user id does not exist |\n| DATABASE_UPDATE_FAILED | Failed to update database                |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\ntry {\n    await auth.createSession(userId);\n} catch {\n    // invalid user id\n}\n```\n\n### `createUser()`\n\nCreates a new user.\n\n```ts\nconst createUser: (\n    provider: string,\n    identifier: string,\n    options?: {\n        password?: string;\n        userData?: Lucia.UserData;\n    }\n) => Promise<User>;\n```\n\n#### Parameter\n\n| name             | type             | description                                             | optional |\n| ---------------- | ---------------- | ------------------------------------------------------- | -------- |\n| provider         | `string`         | The provider of the user to create                      |          |\n| identifier       | `string`         | The identifier of the user˝ to create                   |          |\n| options.password | `string`         | The password of the user - can be undefined to omit it. | true     |\n| options.userData | `Lucia.UserData` | Additional user data to store in `user` table           | true     |\n\n#### Returns\n\n| type                                        | description            |\n| ------------------------------------------- | ---------------------- |\n| [`User`](/reference/types/lucia-types#user) | The newly created user |\n\n#### Errors\n\n| name                       | description                                           |\n| -------------------------- | ----------------------------------------------------- |\n| AUTH_DUPLICATE_PROVIDER_ID | The user with the provider and identifier exists      |\n| AUTH_DUPLICATE_USER_DATA   | One of the user data value violates unique constraint |\n| DATABASE_UPDATE_FAILED     | Failed to update database                             |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.createUser(\"email\", \"user@example.com\", {\n        password: \"123456\",\n        userData: {\n            username: \"user123\",\n            isAdmin: true,\n        },\n    });\n} catch {\n    // error\n}\n```\n\n### `deleteAllCookies()`\n\nDeletes all cookies created by Lucia.\n\n```ts\nconst deleteAllCookies: (cookie: Cookie) => Promise<void>;\n```\n\n#### Parameter\n\n| name   | type   | description               |\n| ------ | ------ | ------------------------- |\n| cookie | Cookie | SvelteKit's cookie module |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\nimport type { Action } from \"@sveltejs/kit\";\n\nconst action: Action = async ({ cookie }) => {\n    auth.deleteAllCookies(cookie);\n};\n```\n\n### `deleteExpiredUserSessions()`\n\nRemoves all expired session of a user from the `session` table. Will succeed regardless of the validity of the user id\n\n```ts\nconst deleteExpiredUserSessions: (userId: string) => Promise<void>;\n```\n\n#### Parameter\n\n| name   | type     | description         |\n| ------ | -------- | ------------------- |\n| userId | `string` | User id of the user |\n\n#### Errors\n\n| name                   | description               |\n| ---------------------- | ------------------------- |\n| DATABASE_UPDATE_FAILED | Failed to update database |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\ntry {\n    await auth.deleteExpiredUserSession(userId);\n} catch {\n    // error\n}\n```\n\n### `deleteUser()`\n\nDeletes a user. Will succeed regardless of the validity of the user id.\n\n```ts\nconst deleteUser: (userId: string) => Promise<void>;\n```\n\n#### Parameter\n\n| name   | type     | description                   |\n| ------ | -------- | ----------------------------- |\n| userId | `string` | User id of the user to delete |\n\n#### Errors\n\n| name                   | description               |\n| ---------------------- | ------------------------- |\n| DATABASE_UPDATE_FAILED | Failed to update database |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.deleteUser(userId);\n} catch {\n    // error\n}\n```\n\n### `getSessionUser()`\n\nValidates the access token, and gets the user of the session.\n\n```ts\nconst getSessionUser: (accessToken: userId) => Promise<User>;\n```\n\n#### Parameter\n\n| name        | type     | description                 |\n| ----------- | -------- | --------------------------- |\n| accessToken | `string` | Access token of the session |\n\n#### Returns\n\n| type                                        | description                                 |\n| ------------------------------------------- | ------------------------------------------- |\n| [`User`](/reference/types/lucia-types#user) | The user of the session of the access token |\n\n#### Errors\n\n| name                      | description                                      |\n| ------------------------- | ------------------------------------------------ |\n| AUTH_INVALID_ACCESS_TOKEN | The session with the access token does not exist |\n| DATABASE_FETCH_FAILED     | Failed to fetch data from the database           |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.getSessionUser(accessToken);\n} catch {\n    // invalid access token\n}\n```\n\n### `getUser()`\n\nGets a user.\n\n```ts\nconst getUser: (userId: string) => Promise<User>;\n```\n\n#### Parameter\n\n| name   | type     | description         |\n| ------ | -------- | ------------------- |\n| userId | `string` | User id of the user |\n\n#### Returns\n\n| type                                        | description               |\n| ------------------------------------------- | ------------------------- |\n| [`User`](/reference/types/lucia-types#user) | The user with the user id |\n\n#### Errors\n\n| name                  | description                              |\n| --------------------- | ---------------------------------------- |\n| AUTH_INVALID_USER_ID  | The user with the user id does not exist |\n| DATABASE_FETCH_FAILED | Failed to fetch data from the database   |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.getUser(userId);\n} catch {\n    // invalid user id\n}\n```\n\n### `getUserByProviderId()`\n\nGet a user by the provider id (provider name, identifier).\n\n```ts\nconst getUserByProviderId: (\n    provider: string,\n    identifier: string\n) => Promise<User>;\n```\n\n#### Parameter\n\n| name       | type     | description                   |\n| ---------- | -------- | ----------------------------- |\n| provider   | `string` | The provider name of the user |\n| identifier | `string` | The identifier of the user    |\n\n#### Returns\n\n| type                                        | description                   |\n| ------------------------------------------- | ----------------------------- |\n| [`User`](/reference/types/lucia-types#user) | The user with the provider id |\n\n#### Errors\n\n| name                     | description                                  |\n| ------------------------ | -------------------------------------------- |\n| AUTH_INVALID_PROVIDER_ID | The user with the provider id does not exist |\n| DATABASE_FETCH_FAILED    | Failed to fetch data from the database       |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.getUserByProviderId(\"email\", \"user@example.com\");\n} catch {\n    // invalid provider id\n}\n```\n\n### `handleHooks()`\n\nFor the handle function in hooks. Handles requests to Lucia's APIs and creates a new global variable in the browser.\n\n```ts\nconst handleHooks: () => Handle;\n```\n\n#### Returns\n\n| type     | description       |\n| -------- | ----------------- |\n| `Handle` | A handle function |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\nexport const handle: Handle = auth.handleHooks();\n```\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\nimport { sequence } from \"@sveltejs/kit\";\n\nexport const handle: Handle = sequence(auth.handleHooks(), customHandle);\n```\n\n### `handleServerSession()`\n\nFor the root layout server load function. Reads the cookies and gets the user of the access token. Refreshes the session if the access token has expired. If a server load function is provided, Lucia will run it after it finishes handling tokens. The load function may also return data.\n\n```ts\nconst handleServerSession: (serverLoad?: ServerLoad) => ServerLoad;\n```\n\n#### Parameter\n\n| name       | type         | description            | optional |\n| ---------- | ------------ | ---------------------- | -------- |\n| serverLoad | `ServerLoad` | A server load function | true     |\n\n#### Returns\n\n| type         | description            |\n| ------------ | ---------------------- |\n| `ServerLoad` | A server load function |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\nimport type { ServerLoad } from \"@sveltejs/kit\";\n\nexport const Load: ServerLoad = auth.handleServerSession(async (event) => {\n    return {\n        message: \"hi\",\n    };\n});\n```\n\n### `invalidateAllUserSessions()`\n\nInvalidates all sessions of a user. Will succeed regardless of the validity of the user id.\n\n```ts\nconst invalidateAllUserSessions: (userId: string) => Promise<void>;\n```\n\n#### Parameter\n\n| name   | type     | description         |\n| ------ | -------- | ------------------- |\n| userId | `string` | User id of the user |\n\n#### Errors\n\n| name                   | description               |\n| ---------------------- | ------------------------- |\n| DATABASE_UPDATE_FAILED | Failed to update database |\n\n#### Example\n\n```ts\nimport { auth } from \"$lib/server/lucia\";\n\ntry {\n    await auth.invalidateAllUserSession(userId);\n} catch {\n    // error\n}\n```\n\n### `invalidateSession()`\n\nInvalidates an access token and the session connected to it. Will succeed regardless of the validity of the access token.\n\n```ts\nconst invalidateSession: (accessToken: string) => Promise<void>;\n```\n\n#### Parameter\n\n| name        | type     | description                 |\n| ----------- | -------- | --------------------------- |\n| accessToken | `string` | Access token of the session |\n\n#### Errors\n\n| name                   | description               |\n| ---------------------- | ------------------------- |\n| DATABASE_UPDATE_FAILED | Failed to update database |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\ntry {\n    await auth.invalidateSession(accessToken);\n} catch {\n    // error\n}\n```\n\n### `parseRequest()`\n\nChecks if the request is from a trusted origin if `configuration.csrfProtection` is true, and gets the access token and refresh token from the cookie.\n\n```ts\nconst parseRequest: (request: Request) => Promise<{\n    accessToken: string;\n    refreshToken: string;\n}>;\n```\n\n#### Parameter\n\n| name    | type      | description                            |\n| ------- | --------- | -------------------------------------- |\n| request | `Request` | Request from SvelteKit's `ServerEvent` |\n\n#### Returns\n\n| name         | type    | description                                                              |\n| ------------ | ------- | ------------------------------------------------------------------------ |\n| accessToken  | `string | The access token read from the request - an empty string if none exists  |\n| refreshToken | `string | The refresh token read from the request - an empty string if none exists |\n\n#### Errors\n\n| name                 | description                              |\n| -------------------- | ---------------------------------------- |\n| AUTH_INVALID_REQUEST | The request is not from a trusted origin |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\nimport type { Action } from \"@sveltejs/kit\";\n\nconst action: Action = async ({ request }) => {\n    try {\n        const { accessToken } = await auth.parseRequest(request);\n    } catch {\n        // request from untrusted domain\n    }\n};\n```\n\n### `refreshSession()`\n\nChecks the validity of the refresh token and refreshes the session.\n\n```ts\nconst refreshSession: (refreshToken: string) => Promise<{\n    session: Session;\n    tokens: Tokens;\n}>;\n```\n\n#### Parameter\n\n| name         | type     | description     |\n| ------------ | -------- | --------------- |\n| refreshToken | `string` | A refresh token |\n\n#### Returns\n\n| name    | type                                            | description                           |\n| ------- | ----------------------------------------------- | ------------------------------------- |\n| session | [`Session`](/reference/types/lucia-types#session)                                       | The newly created session             |\n| tokens  | [`Tokens`](/reference/types/lucia-types#tokens) | The tokens and cookies of the session |\n\n#### Errors\n\n| name                       | description                            |\n| -------------------------- | -------------------------------------- |\n| AUTH_INVALID_REFRESH_TOKEN | Invalid refresh token                  |\n| DATABASE_UPDATE_FAILED     | Failed to update database              |\n| DATABASE_FETCH_FAILED      | Failed to fetch data from the database |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\ntry {\n    await auth.refreshSession(refreshToken);\n} catch {\n    // error\n}\n```\n\n### `updateUserData()`\n\nUpdates one of the custom fields in the `user` table. The keys of `userData` should be one of the additional columns `user` table, and the values of it can be `null` but not `undefined`.\n\n```ts\nconst updateUserData: (\n    userId: string,\n    userData: Partial<Lucia.UserData>\n) => Promise<User>;\n```\n\n#### Parameter\n\n| name     | type                              | description                                                             |\n| -------- | --------------------------------- | ----------------------------------------------------------------------- |\n| userId   | `string`                          | A refresh token                                                         |\n| userData | `Partial<`[`Lucia.UserData`]()`>` | Key-value pairs of some or all of the column in `user` table to update. |\n\n#### Returns\n\n| type                                        | description      |\n| ------------------------------------------- | ---------------- |\n| [`User`](/reference/types/lucia-types#user) | The updated user |\n\n#### Errors\n\n| name                     | description                                  |\n| ------------------------ | -------------------------------------------- |\n| AUTH_INVALID_USER_ID     | Invalid refresh token                        |\n| AUTH_DUPLICATE_USER_DATA | One of the column violates unique constraint |\n| DATABASE_UPDATE_FAILED   | Failed to update database                    |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\ntry {\n    await auth.updateUserData(userId, {\n        username: \"user123\",\n    });\n} catch {\n    // error\n}\n```\n\n### `updateUserPassword()`\n\nUpdates a user's password.\n\n```ts\nconst updateUserPassword: (\n    userId: string,\n    password: string | null\n) => Promise<User>;\n```\n\n#### Parameter\n\n| name     | type             | description     |\n| -------- | ---------------- | --------------- |\n| userId   | `string`         | A refresh token |\n| password | `string \\| null` | A new password  |\n\n#### Returns\n\n| type                                        | description      |\n| ------------------------------------------- | ---------------- |\n| [`User`](/reference/types/lucia-types#user) | The updated user |\n\n#### Errors\n\n| name                   | description               |\n| ---------------------- | ------------------------- |\n| AUTH_INVALID_USER_ID   | Invalid refresh token     |\n| DATABASE_UPDATE_FAILED | Failed to update database |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\ntry {\n    await auth.updateUserPassword(userId, \"123456\");\n    await auth.updateUserPassword(userId, null);\n} catch {\n    // error\n}\n```\n\n### `updateUserProviderId()`\n\nUpdates a user's provider id.\n\n```ts\nconst updateUserProviderId: (\n    userId: string,\n    provider: string,\n    identifier: string\n) => Promise<User>;\n```\n\n#### Parameter\n\n| name       | type     | description                          |\n| ---------- | -------- | ------------------------------------ |\n| userId     | `string` | A refresh token                      |\n| provider   | `string` | The provider name of the provider id |\n| identifier | `string` | The identifier of the provider id    |\n\n#### Returns\n\n| type                                        | description      |\n| ------------------------------------------- | ---------------- |\n| [`User`](/reference/types/lucia-types#user) | The updated user |\n\n#### Errors\n\n| name                   | description               |\n| ---------------------- | ------------------------- |\n| AUTH_INVALID_USER_ID   | Invalid refresh token     |\n| DATABASE_UPDATE_FAILED | Failed to update database |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\ntry {\n    await auth.updateUserProviderId(userId, \"email\", \"user@example.com\");\n} catch {\n    // error\n}\n```\n\n### `validateAccessToken()`\n\nValidates an access token.\n\n```ts\nconst validateAccessToken: (accessToken: string) => Promise<Session>;\n```\n\n#### Parameter\n\n| name        | type     | description     |\n| ----------- | -------- | --------------- |\n| accessToken | `string` | An access token |\n\n#### Returns\n\n| type      | description                     |\n| --------- | ------------------------------- |\n| [`Session`](/reference/types/lucia-types#session) | The session of the access token |\n\n#### Errors\n\n| name                      | description                            |\n| ------------------------- | -------------------------------------- |\n| AUTH_INVALID_ACCESS_TOKEN | The access token is invalid            |\n| DATABASE_FETCH_FAILED     | Failed to fetch data from the database |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\ntry {\n    await auth.validateAccessToken(accessToken);\n} catch {\n    // invalid\n}\n```\n\n### `validateRefreshToken()`\n\nValidates a refresh token. When refreshing the session, the current refresh token should be invalidated before creating a new refresh token.\n\n```ts\ntry {\n    const validateRefreshToken: (refreshToken: string) => Promise<string>;\n} catch {\n    // invalid\n}\n```\n\n#### Parameter\n\n| name         | type     | description     |\n| ------------ | -------- | --------------- |\n| refreshToken | `string` | A refresh token |\n\n#### Returns\n\n| type     | description                                  |\n| -------- | -------------------------------------------- |\n| `string` | The user id of the user of the refresh token |\n\n#### Errors\n\n| name                       | description                            |\n| -------------------------- | -------------------------------------- |\n| AUTH_INVALID_REFRESH_TOKEN | The access token is invalid            |\n| DATABASE_FETCH_FAILED      | Failed to fetch data from the database |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\n\nawait auth.validateRefreshToken(refreshToken);\n```\n\n### `validateRequest()`\n\nChecks if the request is from a trusted domain, and if so, validates the access token. Runs [`parseRequest()`](/reference/api/server-api#parserequest) and [`validateAccessToken()`](/reference/api/server-api#validateaccesstoken).\n\n```ts\nconst parseRequest: (request: Request) => Promise<Session>;\n```\n\n#### Parameter\n\n| name    | type      | description                            |\n| ------- | --------- | -------------------------------------- |\n| request | `Request` | Request from SvelteKit's `ServerEvent` |\n\n#### Returns\n\n| name         | type    | description                                                              |\n| ------------ | ------- | ------------------------------------------------------------------------ |\n| accessToken  | `string | The access token read from the request - an empty string if none exists  |\n| refreshToken | `string | The refresh token read from the request - an empty string if none exists |\n\n#### Errors\n\n| name                      | description                              |\n| ------------------------- | ---------------------------------------- |\n| AUTH_INVALID_REQUEST      | The request is not from a trusted origin |\n| AUTH_INVALID_ACCESS_TOKEN | The access token is invalid              |\n| DATABASE_FETCH_FAILED     | Failed to fetch data from the database   |\n\n#### Example\n\n```ts\nimport { auth } from \"lucia-sveltekit\";\nimport type { Action } from \"@sveltejs/kit\";\n\nconst action: Action = async ({ request }) => {\n    try {\n        await auth.validateRequest(request);\n    } catch {\n        // unauthenticated\n    }\n};\n```\n\n## `LuciaError`\n\nRefer to [Error reference](/reference/types/errors).\n\n```ts\nclass LuciaError extends Error\n```\n\n## `setCookie()`\n\nA helper function to set cookie strings using SvelteKit's `Cookie`.\n\n```ts\nconst setCookie: (cookie: Cookie, ...cookies: string[]) => void;\n```\n\n#### Parameter\n\n| name    | type          | description                |\n| ------- | ------------- | -------------------------- |\n| cookie  | `Cookie`      | SvelteKit's cookie module  |\n| cookies | `...string[]` | An array of cookie strings |\n\n#### Example\n\n```ts\nimport { setCookie } from \"lucia-sveltekit\";\nimport type { Action } from \"@sveltejs/kit\";\n\nconst action: Action = async ({ cookie }) => {\n    setCookie(cookie, \"cookie1=value;\", \"cookie2=value; path=/;\");\n};\n```\n","frontmatter":{"title":"Server API"}},{"slug":"/reference/configure/lucia-configurations/","content":"\nConfigurations for `lucia()`.\n\n```ts\ninterface Configurations {\n    adapter: Adapter;\n    env: Env;\n    generateCustomUserId?: () => Promise<string | null>;\n    csrfProtection?: boolean;\n}\n```\n\n## Required\n\n### `adapter`\n\nAn adapter for your database.\n\n| type      | description        |\n| --------- | ------------------ |\n| `Adapter` | A database adapter |\n\n### `env`\n\nTells Lucia if the app is running on HTTP or HTTPS.\n\n| type              | description                                                |\n| ----------------- | ---------------------------------------------------------- |\n| `\"DEV\" \\| \"PROD\"` | `\"DEV\"` if the app is hosted on HTTP, `\"PROD\"` if on HTTPS |\n\n#### Example\n\n```ts\nimport { dev } from \"$app/environment\";\n\nconst env = dev ? \"DEV\" : \"PROD\";\n```\n\n## Optional\n\n### `csrfProtection`\n\nChecks if the request is from a trusted origin (where the app is hosted) in [`parseRequest`](/reference/api/server-api#parserequest) and [`validateRequest`](/reference/api/server-api#validaterequest). If you set this to `false`, make sure to add your own CSRF protection.\n\n| type      | default |\n| --------- | ------- |\n| `boolean` | `true`  |\n\n### `generateCustomUserId`\n\nThe database will create its own user id if the returned value is `null`\n\n| type                            | description                                | default            |\n| ------------------------------- | ------------------------------------------ | ------------------ |\n| `() => Promise<string \\| null>` | A function that generates a random user id | `async () => null` |\n","frontmatter":{"title":"Lucia configurations"}},{"slug":"/reference/types/errors/","content":"\nA list of error messages\n\n| name                              |\n| --------------------------------- |\n| `AUTH_INVALID_ACCESS_TOKEN`       |\n| `AUTH_INVALID_REFRESH_TOKEN`      |\n| `AUTH_INVALID_PASSWORD`           |\n| `AUTH_OUTDATED_PASSWORD`          |\n| `AUTH_INVALID_IDENTIFIER_TOKEN`   |\n| `AUTH_DUPLICATE_USER_DATA`        |\n| `AUTH_DUPLICATE_IDENTIFIER_TOKEN` |\n| `AUTH_INVALID_REQUEST`            |\n| `AUTH_INVALID_USER_ID`            |\n| `AUTH_NOT_AUTHENTICATED`          |\n| `AUTH_DUPLICATE_REFRESH_TOKEN`    |\n| `AUTH_DUPLICATE_ACCESS_TOKEN`     |\n| `DATABASE_FETCH_FAILED`           |\n| `DATABASE_UPDATE_FAILED`          |\n| `REQUEST_UNAUTHORIZED`            |\n| `UNKNOWN_ERROR`                   |","frontmatter":{"title":"Errors"}},{"slug":"/reference/types/lucia-types/","content":"\n## LuciaError\n\nAll errors thrown by Lucia will use this error constructor. Refer to [Errors](/reference/types/errors) for a list of valid error names.\n\n```ts\nclass LuciaError extends Error {}\n```\n\n```ts\nconst constructor: (errorName: LuciaErrorName) => void;\n```\n\n#### Parameter\n\n| name      | type                            | description              |\n| --------- | ------------------------------- | ------------------------ |\n| errorName | `LuciaErrorName extends string` | A valid Lucia error name |\n\n## `Session`\n\nA session.\n\n```ts\ntype Session = {\n    userId: string;\n    expires: number;\n};\n```\n\n| name    | type     | description                         |\n| ------- | -------- | ----------------------------------- |\n| userId  | `string` | User id of the user of the session  |\n| expires | `number` | Unix time of the session expiration |\n\n## `Tokens`\n\n```ts\ntype Tokens = {\n    accessToken: [string, string];\n    refreshToken: [string, string];\n    cookies: string[];\n};\n```\n\n| name            | type       | description                                                |\n| --------------- | ---------- | ---------------------------------------------------------- |\n| accessToken[0]  | `string`   | The access token                                           |\n| accessToken[1]  | `string`   | The cookie string of the access token                      |\n| refreshToken[0] | `string`   | The refresh token                                          |\n| refreshToken[1] | `string`   | The cookie string of the refresh token                     |\n| cookies         | `string[]` | An array of all the cookie strings (access, refresh token) |\n\n## `User`\n\n```ts\ntype User = {\n    userId: string;\n    providerId: string;\n} & Lucia.UserData;\n```\n\n| name       | type                                                           | description                                      |\n| ---------- | -------------------------------------------------------------- | ------------------------------------------------ |\n| userId     | `string`                                                       | The user id of the user                          |\n| providerId | `string`                                                       | The provider id: `${providerName}:${identifier}` |\n|            | [`Lucia.UserData`](/reference/types/type-declaration#userdata) |                                                  |\n","frontmatter":{"title":"Lucia types"}},{"slug":"/reference/types/type-declaration/","content":"\n```ts\ndeclare namespace Lucia {\n    export interface UserData {} \n}\n```\n\n### `UserData`\n\nExtends `{}`. The additional user data stored in the `user` table. The keys should be the name of the columns.\n\n## Declaration\n\nIn `src/app.d.ts`:\n\n```ts\n/// <reference types=\"lucia-sveltekit\" />\ndeclare namespace Lucia {\n\tinterface UserData {}\n}\n```\n\n### Example\n\nIf you have a `phone_number` column in `user` table:\n\n```ts\n/// <reference types=\"lucia-sveltekit\" />\ndeclare namespace Lucia {\n\tinterface UserData {\n\t\tphoneNumber: string\n\t}\n}\n```","frontmatter":{"title":"Type declaration"}}]